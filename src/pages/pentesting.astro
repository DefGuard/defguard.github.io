---
import Navigation from "../components/base/Navigation.astro";
import ProductLayout from "../layouts/ProductLayout.astro";
import FlexibleSection from "../components/FlexibleSection.astro";
import ArrowIcon from "../components/pentesting/ArrowIcon.astro";
import { getCollection } from "astro:content";

const title = "Transparency & Security Report";
const description =
  "Defguard is fully open – not only with our code, but also with our development process, roadmaps, and detailed penetration testing reports from periodic security audits of all Defguard components.";

const featuredImage =
  "github.com/DefGuard/defguard.github.io/raw/main/public/images/product/core/hero-image.png";
const imageWidth = "1920";
const imageHeight = "1080";
const url = "https://defguard.net/pentesting/";
const tags = [
  "defguard",
  "faq",
  "questions",
  "answers",
  "vpn",
  "WireGuard",
  "mfa",
  "2fa",
  "security",
  "authentication",
  "zero-trust",
];

const latestTestDate = new Date("2025-09-02");

const formattedDate = latestTestDate.toLocaleString("en-PL", {
  day: "2-digit",
  month: "long",
  year: "numeric",
});

// Get FAQ items from content collection
const faqItems = await getCollection("pentests");
const severityOrder = {
  Critical: 1,
  High: 2,
  Medium: 3,
  Low: 4,
  Info: 5,
};
// Get the collection and sort it based on the severity
const pentests = await getCollection("pentests");

const sortedPentests = pentests.sort((a, b) => {
  const severityA = a.data.severity as keyof typeof severityOrder;
  const severityB = b.data.severity as keyof typeof severityOrder;

  // Use the severityOrder map to get numerical values for comparison
  const orderA = severityOrder[severityA];
  const orderB = severityOrder[severityB];

  // Compare the numerical values to sort
  return orderA - orderB;
});

let critical_amount = 0;
let high_amount = 0;
let medium_amount = 0;
let low_amount = 0;
let info_amount = 0;
sortedPentests.forEach((pentest) => {
  switch (pentest.data.severity) {
    case "Critical":
      critical_amount++;
      break;
    case "High":
      high_amount++;
      break;
    case "Medium":
      medium_amount++;
      break;
    case "Low":
      low_amount++;
      break;
    case "Info":
      info_amount++;
      break;
  }
});

// Prepare FAQ schema data
const faqSchemaData = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  mainEntity: sortedPentests.map((item) => ({
    "@type": "Vulnerability",
    name: item.data.title,
    acceptedAnswer: {
      "@type": "Answer",
      text: item.body, // This will contain the raw markdown content
    },
  })),
};
---

<ProductLayout
  title={title}
  description={description}
  featuredImage={featuredImage}
  imageWidth={imageWidth}
  imageHeight={imageHeight}
  url={url}
  tags={tags}
>
  <main>
    <FlexibleSection>
      <div class="title-section">
        {title}
      </div>
      <div class="description-section">
        Defguard is fully open – not only with our <a
          href="https://github.com/DefGuard/defguard" style="text-decoration:underline" target="_blank">code</a
        >, but also with our development process, roadmaps, and detailed penetration
        testing reports from periodic security audits of all Defguard components.
      </div>
      <div class="button-row">
        <a href="/security">
          <div class="button">
            <div class="button-text">
              How we approach security in Defguard
              <svg
                width="20"
                height="20"
                viewBox="0 0 20 20"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15 10.5H16.5V14.62C16.5 15.65 15.66 16.5 14.62 16.5H4.88C3.85 16.5 3 15.66 3 14.62V4.88C3 3.84 3.84 3 4.88 3H9V4.5H4.88C4.67 4.5 4.5 4.67 4.5 4.88V14.63C4.5 14.84 4.67 15.01 4.88 15.01H14.63C14.84 15.01 15.01 14.84 15.01 14.63V10.51L15 10.5ZM15.75 3H11.27V4.5H13.9L9.22 9.18L10.28 10.24L15 5.52V8.23H16.5V3.75C16.5 3.34 16.16 3 15.75 3Z"
                  fill="#3961DB"></path>
              </svg>
            </div>
          </div>
        </a>
        <a href="/security#VDP-title">
          <div class="button">
            <div class="button-text">
              Vulnerability Disclosure Process
              <svg
                width="20"
                height="20"
                viewBox="0 0 20 20"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15 10.5H16.5V14.62C16.5 15.65 15.66 16.5 14.62 16.5H4.88C3.85 16.5 3 15.66 3 14.62V4.88C3 3.84 3.84 3 4.88 3H9V4.5H4.88C4.67 4.5 4.5 4.67 4.5 4.88V14.63C4.5 14.84 4.67 15.01 4.88 15.01H14.63C14.84 15.01 15.01 14.84 15.01 14.63V10.51L15 10.5ZM15.75 3H11.27V4.5H13.9L9.22 9.18L10.28 10.24L15 5.52V8.23H16.5V3.75C16.5 3.34 16.16 3 15.75 3Z"
                  fill="#3961DB"></path>
              </svg>
            </div>
          </div>
        </a>
      </div>
      <div class="description-footer">
        Below you can find all previews and current reports, as well as links to Pull
        Requests for each finding, fixing the issue.
      </div>
      <div class="pen-tests-container">
        <div class="sidebar">
          <div class="sidebar-title">Recent penetration test</div>
          <div class="toolbar">
            <div class="toolbar-title">
              {formattedDate}
              <div class="sidebar-number-badge"><p>Latest</p></div>
            </div>

            <div class="divider-toolbar"></div>

            <div class="toolbar-description-first">
              <div class="toolbar-second-title">What was tested:</div>
              <div class="tested-components">
                Core 1.5.0, proxy 1.5.0, Desktop Client 1.5.0, Gateway 1.5.0, Mobile 1.0
              </div>
            </div>
            <div class="divider-toolbar"></div>

            <div class="vulnerabilities-section">
              <div class="toolbar-description-second">
                <div class="toolbar-second-title">Found vulnerabilities:</div>
              </div>
              <div class="severities-list">
                <div class="severity-container severity-item" data-severity="all">
                  <div class="severity-arrow hidden">
                    <ArrowIcon />
                  </div>
                  <div class="severity-text">All issues</div>
                  <div class="sidebar-number-badge">
                    <p>
                      {
                        critical_amount +
                          high_amount +
                          medium_amount +
                          low_amount +
                          info_amount
                      }
                    </p>
                  </div>
                </div>

                <div class="severity-container severity-item" data-severity="critical">
                  <div class="severity-arrow hidden">
                    <ArrowIcon />
                  </div>
                  <div class="severity-text">Critical</div>
                  <div class="sidebar-number-badge sidebar-number-badge-critical">
                    <p>{critical_amount}</p>
                  </div>
                </div>
                <div class="severity-container severity-item" data-severity="high">
                  <div class="severity-arrow hidden">
                    <ArrowIcon />
                  </div>
                  <div class="severity-text">High</div>
                  <div class="sidebar-number-badge sidebar-number-badge-high">
                    <p>{high_amount}</p>
                  </div>
                </div>
                <div class="severity-container severity-item" data-severity="medium">
                  <div class="severity-arrow hidden">
                    <ArrowIcon />
                  </div>
                  <div class="severity-text">Medium</div>
                  <div class="sidebar-number-badge sidebar-number-badge-medium">
                    <p>{medium_amount}</p>
                  </div>
                </div>
                <div class="severity-container severity-item" data-severity="low">
                  <div class="severity-arrow hidden">
                    <ArrowIcon />
                  </div>
                  <div class="severity-text">Low</div>
                  <div class="sidebar-number-badge sidebar-number-badge-low">
                    <p>{low_amount}</p>
                  </div>
                </div>
                <div class="severity-container severity-item" data-severity="info">
                  <div class="severity-arrow hidden">
                    <ArrowIcon />
                  </div>
                  <div class="severity-text">Info</div>
                  <div class="sidebar-number-badge sidebar-number-badge-info">
                    <p>{info_amount}</p>
                  </div>
                </div>
              </div>
            </div>

            <div class="download-report-dropdown">
              <div class="download-report-container" onclick="window.toggleDropdown()">
                <div class="download-report-icon">
                  <svg
                    width="17"
                    height="16"
                    viewBox="0 0 17 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M7.54 3.48387C7.668 2.96774 7.796 2.70968 7.796 2.32258V2.06452C7.924 1.41935 7.924 0.903226 7.796 0.774193C7.796 0.774193 7.796 0.774194 7.796 0.645161L7.668 0.516129C7.668 0.516129 7.668 0.645161 7.54 0.645161C7.284 1.41935 7.284 2.32258 7.54 3.48387ZM3.7 12.3871C3.444 12.5161 3.188 12.6452 3.06 12.7742C2.164 13.5484 1.524 14.4516 1.396 14.8387C2.164 14.7097 2.932 13.9355 3.7 12.3871ZM15.476 10.4516C15.348 10.3226 14.836 9.93548 13.044 9.93548H12.788C12.788 9.93548 12.788 9.93548 12.788 10.0645C13.684 10.4516 14.58 10.7097 15.22 10.7097H15.476H15.604C15.604 10.7097 15.604 10.7097 15.604 10.5806C15.604 10.5806 15.476 10.5806 15.476 10.4516ZM15.988 11.4839C15.732 11.6129 15.348 11.7419 14.836 11.7419C13.812 11.7419 12.276 11.4839 10.996 10.8387C8.82 11.0968 7.156 11.3548 5.876 11.871C5.748 11.871 5.748 11.871 5.62 12C4.084 14.7097 2.804 16 1.78 16C1.524 16 1.396 16 1.268 15.871L0.628 15.4839V15.3548C0.5 15.0968 0.5 14.9677 0.5 14.7097C0.628 14.0645 1.396 12.9032 2.932 12C3.188 11.871 3.572 11.6129 4.084 11.3548C4.468 10.7097 4.852 9.93548 5.364 9.03226C6.004 7.74194 6.388 6.45161 6.772 5.29032C6.26 3.74194 6.004 2.83871 6.516 1.03226C6.644 0.516129 7.028 0 7.54 0H7.796C8.052 0 8.308 0.129032 8.564 0.258064C9.46 1.16129 9.076 3.22581 8.564 4.90323V5.03226C9.076 6.45161 9.844 7.6129 10.612 8.3871C10.996 8.64516 11.252 8.90323 11.764 9.16129C12.404 9.16129 12.916 9.03226 13.428 9.03226C14.964 9.03226 15.988 9.29032 16.372 9.93548C16.5 10.1935 16.5 10.4516 16.5 10.7097C16.372 10.8387 16.244 11.2258 15.988 11.4839ZM7.668 6.45161C7.412 7.35484 6.9 8.3871 6.388 9.54839C6.132 10.0645 5.876 10.4516 5.62 10.9677H5.748H5.876C7.54 10.3226 9.076 9.93548 10.1 9.80645C9.844 9.67742 9.716 9.54839 9.588 9.41936C8.948 8.64516 8.18 7.6129 7.668 6.45161Z"
                      fill="white"></path>
                  </svg>
                </div>
                <div class="download-report-text">Download report</div>
                <div class="download-report-arrow">
                  <svg
                    width="21"
                    height="20"
                    viewBox="0 0 21 20"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M15.19 8.06189L10.87 12.3719C10.5771 12.6642 10.1027 12.6639 9.81 12.3713L5.5 8.06127L6.56066 7.00061L10.3409 10.7809L14.1306 7L15.19 8.06189Z"
                      fill="white"></path>
                  </svg>
                </div>
              </div>
              <div class="dropdown-menu" id="dropdown-menu" style="display: none;">
                <div class="dropdown-header">Report type</div>
                <a href="/download/server-report" class="dropdown-item">
                  <div class="dropdown-item-text">Server</div>
                </a>
                <a href="/download/mobile-report" class="dropdown-item">
                  <div class="dropdown-item-text">Mobile</div>
                </a>
                <a href="/download/desktop-report" class="dropdown-item">
                  <div class="dropdown-item-text">Desktop</div>
                </a>
              </div>
            </div>
          </div>
        </div>
        <div class="main-content">
          <div class="pen-tests-title">What We’re Working On</div>
          <div class="divider"></div>
          <div class="issues-container">
            <div class="column-titles-container">
              <div class="column-title-issue-status">Issue status</div>
              <div class="column-description">
                <div class="column-title-description">Description</div>
              </div>
              <div class="column-title-severity">Severity</div>
            </div>
            {
              sortedPentests.map(async (item, idx) => {
                const status = item.data.status ?? "In Progress";
                let index = idx.toString();

                let statusBg = "#038026";
                if (status === "Completed") statusBg = "#038026";
                else if (status === "In progress") statusBg = "#B6F5C9";

                let severityClass = "severity-text-info";
                if (item.data.severity === "High") severityClass = "severity-text-high";
                else if (item.data.severity === "Medium")
                  severityClass = "severity-text-medium";
                else if (item.data.severity === "Low")
                  severityClass = "severity-text-low";
                else if (item.data.severity === "Critical")
                  severityClass = "severity-text-critical";

                let statusIndicatorClass = "status-in-progress-indicator";
                if (status === "Completed")
                  statusIndicatorClass = "status-completed-indicator";

                let statusTextClass = "status-in-progress-text";
                if (status === "Completed") statusTextClass = "status-completed-text";

                let github_issue_link = item.data.issue_link ?? "No issue linked!";
                let link_enabled = true;
                if (github_issue_link === "No issue linked!") link_enabled = false;

                let github_link_style = "text-decoration: none;";
                if (link_enabled === false)
                  github_link_style =
                    "text-decoration: none; pointer-events: none; cursor: default;";

                const { Content, headings } = await item.render();

                return (
                  <>
                    <div
                      class="issue"
                      id={`issue-` + index}
                      data-severity={item.data.severity?.toLowerCase()}
                      onclick={`window.toggleIssue(${index})`}
                    >
                      <div class="arrow-box">
                        <div class="arrow-icon">
                          <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                            <path
                              fill-rule="evenodd"
                              clip-rule="evenodd"
                              d="M8.11145 4.95046L12.4214 9.27046C12.7138 9.56345 12.7135 10.0378 12.4208 10.3305L8.11083 14.6405L7.05017 13.5798L10.8305 9.79956L7.04956 6.00989L8.11145 4.95046Z"
                              fill="#7E8794"
                            />
                          </svg>
                        </div>
                      </div>
                      <div class="status-box">
                        <div class={statusIndicatorClass}>
                          <div class={statusTextClass}>
                            {status === "Completed" && (
                              <div class="status-success-icon">
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 16 16"
                                  fill="none"
                                >
                                  <path
                                    d="M8 3C5.23485 3 3 5.23485 3 8C3 10.7652 5.23485 13 8 13C10.7652 13 13 10.7652 13 8C13 5.23485 10.7525 3 8 3ZM7.91162 10.0707C7.77273 10.2096 7.58333 10.298 7.38131 10.298C7.17929 10.298 6.9899 10.2222 6.85101 10.0707L5.05808 8.26515L6.13131 7.19192L7.39394 8.45455L9.94444 5.90404L11.0177 6.97727L7.92424 10.0707H7.91162Z"
                                    fill="white"
                                  />
                                </svg>
                              </div>
                            )}
                            {status === "In Progress" && (
                              <div class="status-success-icon">
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 16 16"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    d="M11.7918 8.61795L6.7106 12.8554C6.32389 13.1787 5.72134 12.9253 5.72134 12.4361C5.72134 11.5536 5.72134 10.3566 5.72134 9.37808H3.59895C3.05036 9.37808 2.78956 8.73153 3.20325 8.38205L8.30239 4.14455C8.6891 3.82128 9.29165 4.07465 9.29165 4.56393C9.29165 5.44638 9.29165 6.64336 9.29165 7.62192H11.405C11.9536 7.62192 12.2054 8.26847 11.8007 8.61795H11.7918Z"
                                    fill="#038026"
                                  />
                                </svg>
                              </div>
                            )}
                            {status}
                          </div>
                        </div>
                      </div>
                      <div class="description-box">
                        <div class="description-text">{item.data.title}</div>
                      </div>
                      <div class="severity-box">
                        <div class={severityClass}>{item.data.severity}</div>
                      </div>
                    </div>
                    <div
                      class="issue-details"
                      id={`issue-details-` + index}
                      style="display: none;"
                    >
                      <div class="issue-details-container">
                        <div class="issue-sidebar">
                          <div class="issue-sidebar-title">Linked GitHub issue</div>
                        </div>
                        <div class="issue-detailed-content">
                          <div class="issue-detailed-description">
                            You can track the status of this issue via the GitHub link
                            below. If you wish, you may also subscribe there to receive
                            notifications about its resolution.
                          </div>
                          <a
                            href={github_issue_link}
                            style={github_link_style}
                            target="_blank"
                          >
                            <div class="linked-github-button">
                              <div class="github-icon">
                                <svg
                                  width="20"
                                  height="20"
                                  viewBox="0 0 20 20"
                                  fill="none"
                                  xmlns="http://www.w3.org/2000/svg"
                                >
                                  <path
                                    fill-rule="evenodd"
                                    clip-rule="evenodd"
                                    d="M10 2C5.58214 2 2 5.67162 2 10.204C2 13.8292 4.29286 16.9008 7.47143 17.9866C7.87143 18.0616 8.01786 17.808 8.01786 17.5901C8.01786 17.3937 8.01071 16.8794 8.00714 16.1936C5.78214 16.6901 5.31071 15.0935 5.31071 15.0935C4.94643 14.1471 4.42143 13.8935 4.42143 13.8935C3.69643 13.3827 4.475 13.3935 4.475 13.3935C5.27857 13.4506 5.7 14.2399 5.7 14.2399C6.41429 15.4936 7.57143 15.1328 8.02857 14.9221C8.1 14.3935 8.30714 14.0292 8.53571 13.8256C6.76071 13.6185 4.89286 12.9149 4.89286 9.77184C4.89286 8.87536 5.20357 8.14318 5.71429 7.57172C5.63214 7.36457 5.35714 6.52881 5.79286 5.40018C5.79286 5.40018 6.46429 5.17874 7.99286 6.23951C8.63214 6.05736 9.31429 5.96807 9.99643 5.9645C10.675 5.96807 11.3607 6.05736 12 6.23951C13.5286 5.17874 14.1964 5.40018 14.1964 5.40018C14.6321 6.52881 14.3571 7.36457 14.275 7.57172C14.7857 8.14675 15.0964 8.87893 15.0964 9.77184C15.0964 12.922 13.225 13.6149 11.4429 13.8185C11.7286 14.0721 11.9857 14.5721 11.9857 15.3364C11.9857 16.4329 11.975 17.3187 11.975 17.5865C11.975 17.8044 12.1179 18.0616 12.525 17.9794C15.7107 16.8972 18 13.8256 18 10.204C18 5.67162 14.4179 2 10 2Z"
                                    fill="white"
                                  />
                                </svg>
                              </div>
                              <div class="linked-github-button-text">
                                {github_issue_link}
                              </div>
                            </div>
                          </a>
                        </div>
                      </div>
                      <div class="issue-divider" />
                      <div class="markdown-content">
                        <Content />
                        <div class="back-to-top-container" onclick="window.scrollToTop()">
                          <div class="back-to-top-text">Back to top</div>
                          <div class="back-to-top-icon">
                            <svg
                              width="18"
                              height="18"
                              viewBox="0 0 18 18"
                              fill="none"
                              xmlns="http://www.w3.org/2000/svg"
                            >
                              <path
                                d="M9.00681 3.47928L13.4879 7.95141L12.5398 8.89951L9.20358 5.57224L9.20358 14.3108L7.86194 14.3108L7.86194 5.57224L4.52573 8.89951L3.57764 7.95141L8.05872 3.47928C8.3181 3.21989 8.74743 3.21989 9.00681 3.47928Z"
                                fill="#3961DB"
                              />
                            </svg>
                          </div>
                        </div>
                      </div>
                    </div>
                  </>
                );
              })
            }
            <div class="no-issues-message" id="no-issues-message" style="display: none;">
              <div class="empty-arrow-box"></div>
              <div class="empty-status-box"></div>
              <div class="empty-description-box">
                <div class="no-issues-text">
                  No vulnerability issues match the selected criteria
                </div>
              </div>
              <div class="empty-severity-box"></div>
            </div>
          </div>
        </div>
      </div>
    </FlexibleSection>
  </main>

  <Navigation activeSlug="/pentesting" />

  <style lang="scss" is:global>
    @use "../styles/mixins/typography" as *;

    :root {
      // TODO: Move these variables to a separate file and import them where needed
      // This probably requires a bigger overhaul of the whole site

      // Button variables
      --Button-sizes-button-size-primary: 36px;
      --border-radius-button-border-radius-primary: 8px;

      // Spacing variables
      --spacing-xs-4: 4px;
      --spacing-sm-8: 8px;
      --spacing-md-12: 12px;
      --spacing-lg-16: 16px;
      --spacing-xl-20: 20px;
      --spacing-3xl-40: 40px;
      --spacing-icons-button: 8px;
      --spacing-icons-badge: 4px;

      // Menu/Dropdown variables
      --Spacing-menu-padding-sides: 8px;
      --Border-radius-menu-border-radius-group: 12px;
      --Border-radius-menu-border-radius-item: 8px;

      // Border variables
      --border-size-1: 1px;
      --radius-md-8: 8px;
      --radius-lg-12: 12px;
      --divider-height: 1px;

      // Background colors
      --bgColor-action: #3961db;
      --bgColor-action-muted: #edf1fc;
      --bgColor-default: #fff;
      --bgColor-white: #fff;
      --bgColor-muted: #f7f8fa;
      --bgColor-subtle: #f5f6f8;
      --bgColor-active: #dfe3e9;
      --bgColor-dark: #242629;
      --bgColor-success: #038026;

      // Text/foreground colors
      --fgColor-default: #1d1f22;
      --fgColor-muted: #7e8794;
      --fgColor-faded: #3d434b;
      --fgColor-white: #fff;
      --fgColor-action: #3961db;
      --fgColor-neutral: #4a5059;
      --fgColor-success: #038026;
      --fgColor-critical: #cc3c3c;
      --fgColor-attention: #ff9500;

      // Border colors
      --borderColor-default: #dfe3e9;
      --borderColor-disabled: #dfe3e9;
      --borderColor-action: #3961db;

      // Icon sizes
      --icons-size-default: 20px;
      --size-icons-small: 16px;
      --size-xs-16: 16px;
      --size-sm-20: 20px;

      // Badge/Button sizes
      --General-badge-height: 24px;
      --General-badge-spacing: 8px;
      --General-badge-border-radius: 8px;

      // Font variables
      --font-family-component: Geist;
      --font-sizes-button-typography-primary: 14px;
      --font-weight-regular-400: 400;

      // Specific color values for badges
      --saturated-green-color-green-500-transparent: rgba(3, 128, 38, 0.08);
    }

    a {
      text-decoration: none;
    }

    .main {
      webkit-font-smoothing: antialiased;
    }

    .download-report-container {
      display: flex;
      min-height: var(--Button-sizes-button-size-primary);
      padding: var(--spacing-sm-8) var(--spacing-lg-16);
      justify-content: center;
      align-items: center;
      gap: var(--spacing-icons-button);
      align-self: stretch;
      border-radius: var(--border-radius-button-border-radius-primary);
      background: var(--bgColor-action);
      cursor: pointer;
      transition: background-color 0.2s ease;
    }

    .download-report-container:hover {
      background-color: #2952d1;
    }

    .download-report-dropdown {
      position: relative;
    }

    .dropdown-menu {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      border-radius: var(--Border-radius-menu-border-radius-group);
      border: var(--border-size-1) solid var(--borderColor-disabled);
      background: var(--bgColor-default);
      z-index: 1000;
      margin-top: 4px;
      overflow: hidden;
      min-width: 232px;
      width: 232px;
      padding: var(--Spacing-menu-padding-sides);
    }

    .dropdown-header {
      padding: var(--Spacing-menu-padding-sides);
      @include typography-geist(sidebar-title, var(--fgColor-muted));
    }

    .dropdown-divider {
      height: 1px;
      background: var(--borderColor-default);
    }

    .dropdown-item {
      display: flex;
      padding: var(--Spacing-menu-padding-sides);
      align-items: center;
      text-decoration: none;
      transition: background-color 0.2s ease;
      border: none;
      background: none;
      width: 100%;
      cursor: pointer;
      border-radius: var(--Border-radius-menu-border-radius-item);
    }

    .dropdown-item:hover {
      background: var(--bgColor-action-muted);
    }

    .dropdown-item-text {
      @include typography-geist(sidebar-text, var(--fgColor-default));
    }

    .download-report-icon {
      width: var(--icons-size-default);
      height: var(--icons-size-default);
    }

    .download-report-text {
      color: var(--fgColor-white);
      leading-trim: both;
      text-edge: cap;
      font-family: var(--font-family-component);
      font-size: var(--font-sizes-button-typography-primary);
      font-style: normal;
      font-weight: var(--font-weight-regular-400);
      line-height: normal;
    }

    .download-report-arrow {
      width: var(--icons-size-default);
      height: var(--icons-size-default);
      transition: transform 0.2s ease;
    }

    .download-report-arrow.rotated {
      transform: rotate(180deg);
    }

    .sidebar {
      display: flex;
      width: 250px;
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-md-12, 12px);

      .sidebar-title {
        align-self: stretch;
        @include typography-geist("sidebar-title", var(--fgColor-faded));
      }

      .severity-item {
        cursor: pointer;
        transition: background-color 0.2s ease;
      }

      .severity-item.selected {
        background: var(--bgColor-white);
      }

      .severity-item.selected .severity-text {
        color: var(--fgColor-action);
      }

      .severity-item:hover:not(.selected) {
        background: var(--bgColor-action-muted);
      }

      .severity-item:hover:not(.selected) .severity-text {
        color: var(--fgColor-action);
      }

      .severity-arrow {
        height: 16px;
        display: flex;
        justify-content: center;
        align-items: center;
        aspect-ratio: 1/1;
        transition:
          width 0.2s ease,
          opacity 0.2s ease;
        overflow: hidden;
        margin-right: var(--spacing-sm-8);
      }

      .severity-arrow.hidden {
        width: 0;
        opacity: 0;
      }

      .severity-arrow.visible {
        width: var(--size-icons-small);
        opacity: 1;
      }

      .sidebar-number-badge {
        display: flex;
        min-width: 24px;
        min-height: 16px;
        padding: 0 var(--spacing-xs-4);
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 10px;
        border-radius: 8px;
        background: var(--bgColor-dark);
      }

      .sidebar-number-badge-critical {
        background: #cc3c3c;
      }
      .sidebar-number-badge-high {
        background: #cc3c3c;
      }
      .sidebar-number-badge-medium {
        background: #ff9500;
      }
      .sidebar-number-badge-low {
        background: #3961db;
      }

      .sidebar-number-badge p {
        @include typography-geist("badge-micro", var(--fgColor-white));
        text-align: center;
      }

      .sidebar-number-badge-info {
        background: #f0f2f5;

        p {
          color: var(--fgColor-neutral);
        }
      }

      .severity-container {
        display: flex;
        padding: var(--spacing-xs-4) var(--spacing-sm-8);
        align-items: center;
        align-self: stretch;
        border-radius: var(--radius-md-8);
        background: var(--bgColor-action-muted);
      }

      .severity-text {
        @include typography-geist("sidebar-text", var(--fgColor-default));
        flex-grow: 1;
      }

      .severity-text-invert {
        color: var(--fgColor-neutral);
      }

      .severities-list {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-xs-4);
      }

      .toolbar {
        display: flex;
        padding: var(--spacing-md-12);
        flex-direction: column;
        gap: var(--spacing-xl-20);
        align-self: stretch;
        border-radius: var(--radius-lg-12);
        background: var(--bgColor-action-muted);
      }

      .toolbar-title {
        display: flex;
        flex-wrap: wrap;
        gap: var(--spacing-md-12);
        @include typography-geist("toolbar-title", var(--fgColor-default));

        .sidebar-number-badge {
          display: flex;
          height: var(--size-sm-20);
          padding: 0 var(--spacing-sm-8);
          justify-content: center;
          align-items: center;
        }
      }

      .toolbar-second-title {
        @include typography-geist("sidebar-title", var(--fgColor-muted));
      }

      .vulnerabilities-section {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-sm-8);
        align-self: stretch;
      }
    }

    .issue-details {
      .back-to-top-container {
        display: flex;
        padding-top: var(--spacing-md-12);
        align-items: center;
        gap: var(--spacing-xs-4);
        width: fit-content;
        cursor: pointer;
        transition: opacity 0.2s ease;
        grid-column: 2;
      }

      .back-to-top-container:hover {
        opacity: 0.7;
      }

      .back-to-top-text {
        @include typography-geist("sidebar-title", var(--fgColor-action));
      }

      .back-to-top-icon {
        width: var(--size-icons-small);
        height: 20px;
        aspect-ratio: 1/1;
      }

      .markdown-content {
        display: grid;
        grid-template-columns: 134px minmax(0, max-content);
        column-gap: var(--spacing-3xl-40);
        row-gap: 20px;
        align-items: start;
        padding: 20px 0;
        overflow: visible;

        .issue-divider {
          grid-column: 2;
          width: auto;
          margin-left: 0;
          margin-right: 0;
        }

        p {
          margin: 0 0 12px 0;
        }

        p:last-child {
          margin-bottom: 0;
        }
      }

      .markdown-content {
        * {
          box-sizing: border-box;
        }

        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
          grid-column: 1;
          @include typography-geist("issue-sidebar", var(--fgColor-faded));
          margin: 0;
        }

        > *:not(h1):not(h2):not(h3):not(h4):not(h5):not(h6) {
          grid-column: 2;
          @include typography-geist("issue-content", var(--fgColor-default));
          flex: 1 0 0;
          margin: 0 0 12px 0;
          overflow-wrap: break-word;
          word-wrap: break-word;

          &:last-child {
            margin-bottom: 0;
          }
        }

        blockquote {
          border-left: 4px solid var(--borderColor-action);
          padding-left: 16px;
          margin: 12px 0;
          font-style: italic;
          color: var(--fgColor-muted);
        }

        ul,
        ol {
          margin: 0 0 12px 0;
          padding-left: 20px;
        }

        li {
          margin-bottom: 4px;
        }

        a {
          color: var(--fgColor-action);
        }

        pre {
          padding: var(--spacing-lg-16);
          border-radius: var(--radius-lg-12);
          border: 1px solid var(--borderColor-default);
          background: var(--bgColor-muted);
          max-width: 100%;
          overflow-x: auto;
        }

        code {
          max-width: 100%;
          overflow-x: auto;
        }

        table {
          width: 100%;
          border-collapse: collapse;
          margin: 12px 0;

          th,
          td {
            padding: 8px 12px;
            border: 1px solid var(--borderColor-default);
            text-align: left;
          }

          th {
            background-color: var(--bgColor-subtle);
            font-weight: 600;
          }
        }

        img {
          max-width: 100%;
          width: auto;
          height: auto;
          display: block;
          margin: 12px 0;
        }
      }
    }

    .title-section {
      @include typography-geist("title", var(--fgColor-default));
      margin-bottom: 32px;
    }

    .description-section {
      @include typography-geist("description", #1d1f22);
      margin-bottom: 24px;
    }

    .button-row {
      display: flex;
      gap: 16px;
      margin-bottom: 24px;
    }

    .button {
      display: flex;
      width: fit-content;
      height: 36px;
      padding: 8px 16px;
      justify-content: center;
      align-items: center;
      gap: 8px;
      border-radius: var(--border-radius-button-border-radius-primary);
      border: 1px solid var(--borderColor-action);
      transition: background-color 0.3s ease;
    }

    .button:hover {
      background-color: var(--bgColor-action-muted);
    }

    .button-text {
      display: flex;
      align-items: center;
      @include typography-geist("button", var(--fgColor-action));
      gap: 8px;
    }

    .description-footer {
      align-self: stretch;
      @include typography-geist("description-footer", var(--fgColor-muted));
      margin-bottom: 80px;
    }

    .pen-tests-container {
      display: flex;
      flex-direction: row;
      gap: 40px;
      width: 100%;
      align-items: flex-start;
    }

    .main-content {
      display: flex;
      max-width: 819px;
      flex-direction: column;
      align-items: flex-start;
      gap: var(--spacing-xl-20);
    }

    .pen-tests-title {
      @include typography-geist("pen-title", var(--fgColor-default));
      margin-bottom: 20px;
    }

    .divider {
      height: var(--divider-height);
      align-self: stretch;
      background: var(--bgColor-active);
    }

    .divider-toolbar {
      height: var(--divider-height);
      align-self: stretch;
      background: var(--bgColor-active);
    }

    .tested-components {
      @include typography-geist("sidebar-title", var(--fgColor-default));
      margin-top: 12px;
    }
    .issues-container {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      align-self: stretch;

      .no-issues-message {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: flex-start;
        align-self: stretch;
      }

      .empty-arrow-box {
        display: flex;
        width: 40px;
        height: 52px;
        padding: 10px;
        justify-content: center;
        align-items: center;
        gap: 10px;
        border-bottom: 1px solid var(--borderColor-default);
      }

      .empty-status-box {
        display: flex;
        width: 130px;
        height: 52px;
        padding: 8px;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start;
        gap: 10px;
        border-bottom: 1px solid var(--borderColor-default);
      }

      .empty-description-box {
        display: flex;
        height: 52px;
        padding: 2px;
        align-items: center;
        gap: 10px;
        flex: 1 0 0;
        border-bottom: 1px solid var(--borderColor-default);
        justify-content: center;
      }

      .empty-severity-box {
        display: flex;
        width: 73px;
        height: 52px;
        padding: 10px;
        justify-content: center;
        align-items: center;
        gap: 10px;
        border-bottom: 1px solid var(--borderColor-default);
      }

      .no-issues-text {
        @include typography-geist("issue-content", var(--fgColor-muted));
        text-align: center;
      }

      .issue {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: flex-start;
        align-self: stretch;
        cursor: pointer;
        transition: background-color 0.2s ease;
      }

      .issue:hover {
        background-color: var(--bgColor-subtle);
      }
    }

    .column-titles-container {
      display: flex;
      align-items: center;
      gap: 12px;
      align-self: stretch;
      margin-bottom: 10px;
    }

    .column-title-issue-status {
      @include typography-geist("column-title", var(--fgColor-muted));
      margin-left: 53px;
      width: 68px;
    }

    .column-description {
      display: flex;
      width: 609px;
      padding-left: 40px;
      align-items: center;
      gap: 10px;
    }

    .column-title-description {
      width: 73.177px;
      flex-shrink: 0;
      @include typography-geist("column-title", var(--fgColor-muted));
    }

    .column-title-severity {
      width: 52.269px;
      @include typography-geist("column-title", var(--fgColor-muted));
      margin-left: 12px;
      margin-right: 12px;
    }

    .arrow-box {
      display: flex;
      width: 40px;
      height: 52px;
      padding: 10px;
      justify-content: center;
      align-items: center;
      gap: 10px;
      border-bottom: 1px solid var(--borderColor-default);
    }

    .status-box {
      display: flex;
      width: 130px;
      height: 52px;
      padding: 8px;
      flex-direction: column;
      justify-content: center;
      align-items: flex-start;
      gap: 10px;
      border-bottom: 1px solid var(--borderColor-default);
    }

    .description-box {
      display: flex;
      height: 52px;
      padding: 2px;
      align-items: center;
      gap: 10px;
      flex: 1 0 0;
      border-bottom: 1px solid var(--borderColor-default);
    }

    .severity-box {
      display: flex;
      width: 73px;
      height: 52px;
      padding: 10px;
      justify-content: center;
      align-items: center;
      gap: 10px;
      border-bottom: 1px solid var(--borderColor-default);
    }

    .arrow-icon {
      width: var(--icons-size-default);
      height: var(--icons-size-default);
      flex-shrink: 0;
    }

    .arrow-icon svg {
      transition: transform 0.3s ease;
    }

    .status-completed-indicator {
      display: flex;
      height: var(--General-badge-height);
      padding: var(--General-badge-spacing);
      justify-content: center;
      align-items: center;
      gap: var(--spacing-icons-badge);
      flex-shrink: 0;
      border-radius: var(--General-badge-border-radius);
      background: var(--bgColor-success);
    }
    .status-in-progress-indicator {
      display: flex;
      height: var(--General-badge-height);
      padding: var(--General-badge-spacing);
      justify-content: center;
      align-items: center;
      gap: var(--spacing-icons-badge);
      flex-shrink: 0;
      border-radius: var(--General-badge-border-radius);
      background: var(--saturated-green-color-green-500-transparent);
    }
    .status-completed-text {
      display: flex;
      align-items: center;
      gap: 4px; // odstęp między ikoną a tekstem
      @include typography-geist("badge", var(--fgColor-white));
    }
    .status-in-progress-text {
      display: flex;
      align-items: center;
      gap: 4px;
      @include typography-geist("badge", var(--fgColor-success));
    }
    .status-success-icon {
      width: var(--size-xs-16);
      height: var(--size-icons-small);
      aspect-ratio: 1/1;
      margin-right: 4px;
    }
    .status-in-progress-icon {
      width: var(--size-xs-16);
      height: var(--size-icons-small);
      aspect-ratio: 1/1;
      margin-right: 4px;
    }

    .description-text {
      @include typography-geist("description-text", var(--fgColor-action));
    }
    .severity-text-critical {
      @include typography-geist("severity", var(--fgColor-critical));
      flex: 1 0 0;
    }
    .severity-text-high {
      @include typography-geist("severity", var(--fgColor-critical));
      flex: 1 0 0;
    }
    .severity-text-medium {
      @include typography-geist("severity", var(--fgColor-attention));
      flex: 1 0 0;
    }
    .severity-text-low {
      @include typography-geist("severity", var(--fgColor-muted));
      flex: 1 0 0;
    }
    .severity-text-info {
      @include typography-geist("severity", var(--fgColor-muted));
      flex: 1 0 0;
    }
    .issue-details {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: flex-end;
      align-self: stretch;
    }

    .issue-details-container {
      display: flex;
      padding: 20px 0;
      align-items: flex-start;
      gap: var(--spacing-3xl-40);
      align-self: stretch;
    }

    .issue-sidebar-title {
      @include typography-geist("issue-sidebar", var(--fgColor-faded));
      width: 132px;
    }
    .issue-detailed-description {
      @include typography-geist("issue-content", var(--fgColor-default));
      flex: 1 0 0;
    }
    .linked-github-button {
      display: flex;
      padding: var(--spacing-sm-8) var(--spacing-md-12);
      align-items: center;
      gap: var(--spacing-sm-8);
      align-self: stretch;
      border-radius: var(--radius-md-8);
      background: var(--bgColor-action);
      margin-top: 8px;
    }
    .linked-github-button-text {
      @include typography-geist("button-text", var(--fgColor-white));
    }
    .github-icon {
      width: var(--icons-size-default);
      height: var(--icons-size-default);
    }
    .issue-sidebar {
      @include typography-geist("issue-sidebar", var(--fgColor-faded));
      // width: 161px;
    }
    .issue-divider {
      width: 645px;
      height: var(--divider-height);
      background: var(--bgColor-active);
      margin-left: auto;
      margin-right: 0;
    }
    .text {
      @include typography-geist("issue-content", var(--fgColor-default));
      flex: 1 0 0;
    }
  </style>

  <script is:inline>
    window.toggleIssue = function (idx) {
      let number = idx.toString();
      const details = document.getElementById(`issue-details-${number}`);
      const arrow = document.querySelector(`#issue-${number} .arrow-icon svg`);

      if (details) {
        if (details.style.display === "none" || !details.style.display) {
          details.style.display = "block";
          details.style.maxHeight = "0";
          details.style.overflow = "hidden";
          details.style.transition = "max-height 0.3s ease-out";
          details.offsetHeight;
          details.style.maxHeight = details.scrollHeight + "px";

          if (arrow) {
            arrow.style.transform = "rotate(90deg)";
            arrow.style.transition = "transform 0.3s ease";
          }
        } else {
          details.style.maxHeight = details.scrollHeight + "px";
          details.style.transition = "max-height 0.3s ease-out";
          details.offsetHeight;
          details.style.maxHeight = "0";

          if (arrow) {
            arrow.style.transform = "rotate(0deg)";
            arrow.style.transition = "transform 0.3s ease";
          }

          setTimeout(() => {
            details.style.display = "none";
          }, 300);
        }
      }
    };

    window.scrollToTop = function () {
      window.scrollTo({
        top: 0,
        behavior: "smooth",
      });
    };

    window.toggleDropdown = function () {
      const dropdownMenu = document.getElementById("dropdown-menu");
      const arrow = document.querySelector(".download-report-arrow");

      if (dropdownMenu && arrow) {
        if (dropdownMenu.style.display === "none" || !dropdownMenu.style.display) {
          dropdownMenu.style.display = "block";
          arrow.classList.add("rotated");
        } else {
          dropdownMenu.style.display = "none";
          arrow.classList.remove("rotated");
        }
      }
    };

    document.addEventListener("click", function (event) {
      const dropdownContainer = document.querySelector(".download-report-dropdown");
      const dropdownMenu = document.getElementById("dropdown-menu");
      const arrow = document.querySelector(".download-report-arrow");

      if (
        dropdownContainer &&
        dropdownMenu &&
        arrow &&
        !dropdownContainer.contains(event.target)
      ) {
        dropdownMenu.style.display = "none";
        arrow.classList.remove("rotated");
      }
    });

    function addMarkdownDividers() {
      const markdownContents = document.querySelectorAll(".markdown-content");

      markdownContents.forEach((container) => {
        const headings = container.querySelectorAll("h1, h2, h3, h4, h5, h6");

        headings.forEach((heading, index) => {
          if (index > 0) {
            const divider = document.createElement("div");
            divider.className = "issue-divider";
            container.insertBefore(divider, heading);
          }
        });
      });
    }

    function handleSeveritySelection() {
      const severityItems = document.querySelectorAll(".severity-item");
      let selectedItem = null;

      severityItems.forEach((item) => {
        item.addEventListener("mouseenter", function () {
          if (selectedItem !== this) {
            severityItems.forEach((otherItem) => {
              const arrow = otherItem.querySelector(".severity-arrow");
              if (arrow && otherItem !== selectedItem) {
                arrow.classList.remove("visible");
                arrow.classList.add("hidden");
              }
            });

            const arrow = this.querySelector(".severity-arrow");
            if (arrow) {
              arrow.classList.remove("hidden");
              arrow.classList.add("visible");
            }
          }
        });

        item.addEventListener("mouseleave", function () {
          if (selectedItem !== this) {
            const arrow = this.querySelector(".severity-arrow");
            if (arrow) {
              arrow.classList.remove("visible");
              arrow.classList.add("hidden");
            }
          }
        });

        item.addEventListener("click", function () {
          if (selectedItem) {
            selectedItem.classList.remove("selected");
            const prevArrow = selectedItem.querySelector(".severity-arrow");
            if (prevArrow) {
              prevArrow.classList.remove("visible");
              prevArrow.classList.add("hidden");
            }
          }

          this.classList.add("selected");
          selectedItem = this;

          const arrow = this.querySelector(".severity-arrow");
          if (arrow) {
            arrow.classList.remove("hidden");
            arrow.classList.add("visible");
          }

          const severity = this.getAttribute("data-severity");
          const allIssuesItem = document.querySelector('[data-severity="all"]');

          if (severity === "all") {
            severityItems.forEach((otherItem) => {
              if (
                otherItem !== this &&
                otherItem.getAttribute("data-severity") !== "all"
              ) {
                otherItem.classList.remove("selected");
                const otherArrow = otherItem.querySelector(".severity-arrow");
                if (otherArrow) {
                  otherArrow.classList.remove("visible");
                  otherArrow.classList.add("hidden");
                }
              }
            });
          } else {
            if (allIssuesItem && allIssuesItem.classList.contains("selected")) {
              allIssuesItem.classList.remove("selected");
              const allIssuesArrow = allIssuesItem.querySelector(".severity-arrow");
              if (allIssuesArrow) {
                allIssuesArrow.classList.remove("visible");
                allIssuesArrow.classList.add("hidden");
              }
            }
          }

          filterIssues(severity);
        });
      });

      const allIssuesItem = document.querySelector('[data-severity="all"]');
      if (allIssuesItem) {
        allIssuesItem.click();
      }
    }

    function filterIssues(selectedSeverity) {
      const allIssues = document.querySelectorAll(".issue");
      const noIssuesMessage = document.getElementById("no-issues-message");
      let visibleCount = 0;

      allIssues.forEach((issue) => {
        const issueSeverity = issue.getAttribute("data-severity");
        const issueDetails = document.getElementById(
          issue.id.replace("issue-", "issue-details-"),
        );

        if (selectedSeverity === "all" || issueSeverity === selectedSeverity) {
          issue.style.display = "flex";
          visibleCount++;
          if (issueDetails && issueDetails.style.display === "block") {
          } else if (issueDetails) {
            issueDetails.style.display = "none";
          }
        } else {
          issue.style.display = "none";
          if (issueDetails) {
            issueDetails.style.display = "none";
          }
        }
      });

      if (noIssuesMessage) {
        if (visibleCount === 0) {
          noIssuesMessage.style.display = "flex";
        } else {
          noIssuesMessage.style.display = "none";
        }
      }
    }

    document.addEventListener("DOMContentLoaded", function () {
      addMarkdownDividers();
      handleSeveritySelection();
    });
  </script>
</ProductLayout>
