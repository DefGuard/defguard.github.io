---
import { Image } from "astro:assets";
import GithubStars from "../../../components/GithubStars/GithubStars";
import ElevatedCard from "../../../components/home/ElevatedCard.astro";
import HomeSection from "../../../components/home/HomeSection.astro";
import headerImage from "/public/images/product/core/hero-image.png";
import AstroButton from "../../../components/AstroButton.astro";
import TrustedBy from "./TrustedBy.astro";
import StoreButtons from "../../../components/buttons/StoreButtons.astro";

interface CTAButton {
  name: string;
  link: string;
  target?: string;
  preload?: boolean;
}

interface Props {
  trustedBy?: boolean;
  title: string;
  description: string;
  buttons?: CTAButton[];
  repo?: string;
  showStoreButtons?: boolean;
}

const { trustedBy = true, title, description, buttons = [], repo = "defguard", showStoreButtons = false } = Astro.props;
---

<HomeSection variant="white" contentId="home-header">
  <h1>{title}</h1>
  <p>
    {description}
  </p>
  <div class="github-track">
    <GithubStars owner="defguard" repo={repo} client:only="react" />
  </div>
  {buttons.length > 0 && (
    <>
      <div class={"link-track" + (showStoreButtons ? " with-store-buttons" : "") }>
        {buttons.map((button) => (
          <AstroButton
            link={{
              href: button.link,
              target: button.target || "_self",
              preload: button.preload ?? true,
            }}
            text={button.name}
          />
        ))}
      </div>
      {showStoreButtons && <StoreButtons />}
    </>
  )}
  <!-- <div class="hero-image-container">
    <Image src={headerImage} alt="Defguard Zero-Trust VPN diagram" loading={"eager"} />
  </div> -->
  {trustedBy && <TrustedBy forceScroll={true} />}
</HomeSection>

<style lang="scss" is:global>
  #home-header {
    padding-bottom: page-spacing(60px);
    padding-top: 50px;

    & > p {
      @include typography(paragraph);
      padding-bottom: 8px;
    }

    h1 {
      color: var(--text-body-primary);
      padding-bottom: 40px;
      //max-width: 996px;
      text-align: left;
      text-wrap: balance;
      @include typography(title);
    }

    .github-track {
      width: 100%;
      padding-bottom: page-spacing(40px);
    }

    .link-track {
      width: 100%;
      display: flex;
      flex-flow: row;
      align-items: center;
      justify-content: center;
      gap: 16px;
      padding: 60px 0px;
      padding-bottom: 60px;

      &.with-store-buttons {
        padding-bottom: 20px;
      }

      @include break-down(sm) {
        flex-flow: column;
        align-items: center;
      }
    }

    .hero-image-container {
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px 0 60px 0;
      display: flex;
      justify-content: center;

      img {
        width: 100%;
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      }

      @include break-down(md) {
        padding: 10px 0 40px 0;
      }
    }

    .header-card {
      padding-bottom: page-spacing(88px);
      & > div {
        background-color: var(--surface-nav-bg);
        box-sizing: border-box;

        padding: 40px 45px 40px 45px;
        @include break-up(lg) {
          padding: 40px 45px 90px 45px;
        }
        p {
          font-family: "Poppins";
          font-size: 18px;
          font-weight: 400;
          line-height: normal;
          text-transform: uppercase;
          padding-bottom: 53px;
          text-wrap: balance;
          text-align: center;
          width: 100%;

          @include break-up(md) {
            font-size: 32px;
          }

          @include break-up(xl) {
            font-size: 36px;
          }

          strong {
            font-weight: 700;
          }
        }
        img {
          width: 100%;
          max-width: 100%;
          aspect-ratio: unset;
          height: auto;
        }
      }
    }
  }
</style>
