---
import Navigation from "../components/base/Navigation.astro";
import ProductLayout from "../layouts/ProductLayout.astro";
import FlexibleSection from "../components/FlexibleSection.astro";
import { getCollection } from "astro:content";

const title = "defguard - Frequently Asked Questions";
const description = "Find answers to common questions about Defguard VPN, WireGuard protocol, MFA security, SSO integration, and enterprise deployment. Comprehensive FAQ covering security, authentication, and technical implementation.";
const featuredImage =
  "github.com/DefGuard/defguard.github.io/raw/main/public/images/product/core/hero-image.png";
const imageWidth = "1920";
const imageHeight = "1080";
const url = "https://defguard.net/faq/";
const tags = [
  "defguard",
  "faq",
  "questions",
  "answers",
  "vpn",
  "WireGuard",
  "mfa",
  "2fa",
  "security",
  "authentication",
  "zero-trust",
];

// Get FAQ items from content collection
const faqItems = await getCollection("faq");
const sortedFaqItems = faqItems.sort((a, b) => a.data.order - b.data.order);

// Prepare FAQ schema data
const faqSchemaData = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": sortedFaqItems.map((item, index) => ({
    "@type": "Question",
    "name": item.data.title,
    "acceptedAnswer": {
      "@type": "Answer",
      "text": item.body // This will contain the raw markdown content
    }
  }))
};
---

<ProductLayout
  title={title}
  description={description}
  featuredImage={featuredImage}
  imageWidth={imageWidth}
  imageHeight={imageHeight}
  url={url}
  tags={tags}
>
  <script type="application/ld+json" set:html={JSON.stringify(faqSchemaData)} />
  <Navigation activeSlug="/faq" />

  <main id="faq-page">
    <FlexibleSection title="Frequently Asked Questions" id="faq-hero" variant="white" theme="light">
      <div slot="left">
        <p>
          Find answers to the most common questions about Defguard, our VPN technology, 
          security features, and implementation details.
        </p>
      </div>
      <div slot="right">
        <p>
          Can't find what you're looking for? Check our 
          <a href="https://docs.defguard.net/" target="_blank" rel="noopener noreferrer">documentation</a> 
          or contact our support team.
        </p>
      </div>
    </FlexibleSection>

    <FlexibleSection title="" id="faq-list" variant="gray" theme="light">
      <div class="faq-container" itemscope>
        {sortedFaqItems.map(async (item, index) => {
          const { Content } = await item.render();
          return (
            <div class="faq-item" itemscope itemtype="https://schema.org/Question" data-faq-item={index}>
              <div class="faq-question" role="button" tabindex="0" aria-expanded="false" aria-controls={`faq-answer-${index}`}>
                <span class="faq-number">{index + 1}</span>
                <span class="faq-text" itemprop="name">{item.data.title}</span>
                <svg class="faq-icon" width="24" height="24" viewBox="0 0 24 24" fill="none">
                  <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <div class="faq-answer" id={`faq-answer-${index}`} aria-labelledby={`faq-question-${index}`} itemscope itemtype="https://schema.org/Answer">
                <div itemprop="text">
                  <Content />
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </FlexibleSection>

    <FlexibleSection title="Need Help?" id="need-help" variant="white" theme="light">
      <div class="help-container">
        <div class="help-content">
          <div class="help-text">
            <h3>Can't find what you're looking for?</h3>
            <p>We're here to help you get the answers you need.</p>
            <div class="help-links">
              <a href="https://docs.defguard.net/" target="_blank" rel="noopener noreferrer" class="help-link">
                <div>
                  <strong>Documentation</strong>
                  <span>Check our comprehensive guides</span>
                </div>
              </a>
              <a href="/book-a-demo/" target="_blank" rel="noopener noreferrer" class="help-link">
                <div>
                  <strong>Book a Call with our experts</strong>
                  <span>See Defguard in action</span>
                </div>
              </a>
              <a href="https://github.com/DefGuard/defguard" target="_blank" rel="noopener noreferrer" class="help-link">
                <div>
                  <strong>GitHub</strong>
                  <span>Visit our repository</span>
                </div>
              </a>
            </div>
          </div>
        </div>
      </div>
    </FlexibleSection>
  </main>
</ProductLayout>

<style lang="scss">
  .faq-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
  }

  .faq-item {
    background: white;
    border: 1px solid var(--border-color, #e5e7eb);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.2s ease;

    &:hover {
      border-color: var(--accent-color, #3b82f6);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
    }
  }

  .faq-question {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background: white;
    cursor: pointer;
    user-select: none;
    transition: background-color 0.2s ease;
    border-bottom: 1px solid var(--border-color, #e5e7eb);

    &:hover {
      background: var(--background-secondary, #f9fafb);
    }

    &:focus {
      outline: 2px solid var(--accent-color, #3b82f6);
      outline-offset: -2px;
    }
  }

  .faq-number {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    background: var(--accent-color, #3b82f6);
    color: white;
    border-radius: 50%;
    font-size: 0.875rem;
    font-weight: 600;
    flex-shrink: 0;
  }

  .faq-text {
    flex: 1;
    font-weight: 600;
    color: var(--text-primary, #111827);
    font-size: 1.125rem;
  }

  .faq-icon {
    width: 1.5rem;
    height: 1.5rem;
    color: var(--text-body, #6b7280);
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }

  .faq-question.expanded .faq-icon {
    transform: rotate(180deg);
  }

  .faq-answer {
    padding: 0 1.5rem 1.5rem 4.5rem;
    color: var(--text-body, #374151);
    line-height: 1.6;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
    opacity: 0;

    &.expanded {
      max-height: 1000px;
      opacity: 1;
      padding: 1.5rem 1.5rem 1.5rem 4.5rem;
    }

    p {
      margin-bottom: 1rem;

      &:last-child {
        margin-bottom: 0;
      }
    }

    ul {
      margin: 1rem 0;
      padding-left: 1.5rem;

      li {
        margin-bottom: 0.5rem;
      }
    }

    a {
      color: var(--accent-color, #3b82f6);
      text-decoration: none;
      font-weight: 500;

      &:hover {
        text-decoration: underline;
      }
    }

    strong {
      color: var(--text-primary, #111827);
      font-weight: 600;
    }
  }

  .help-container {
    width: 100%;
  }

  .help-content {
    padding: 2rem;
    background: var(--background-secondary, #f9fafb);
    border-radius: 12px;
    border: 1px solid var(--border-color, #e5e7eb);
  }

  .help-text {
    text-align: center;

    h3 {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--text-primary, #111827);
      margin-bottom: 0.5rem;
    }

    p {
      color: var(--text-body, #6b7280);
      margin-bottom: 2rem;
    }
  }

  .help-links {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
  }

  .help-link {
    display: block;
    padding: 1rem;
    background: white;
    border: 1px solid var(--border-color, #e5e7eb);
    border-radius: 8px;
    text-decoration: none;
    color: inherit;
    transition: all 0.2s ease;

    &:hover {
      border-color: var(--accent-color, #3b82f6);
      box-shadow: 0 2px 8px rgba(59, 130, 246, 0.1);
      transform: translateY(-1px);
    }

    div {
      strong {
        display: block;
        font-weight: 600;
        color: var(--text-primary, #111827);
        margin-bottom: 0.25rem;
      }

      span {
        font-size: 0.875rem;
        color: var(--text-body, #6b7280);
      }
    }
  }

  @media (max-width: 768px) {
    .faq-question {
      padding: 1rem;
      gap: 0.75rem;
    }

    .faq-text {
      font-size: 1rem;
    }

    .faq-answer {
      padding: 0 1rem 1rem 3.5rem;
    }

    .help-links {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const faqQuestions = document.querySelectorAll('.faq-question');
    
    faqQuestions.forEach((question: Element) => {
      question.addEventListener('click', function(this: HTMLElement) {
        const answer = this.nextElementSibling as HTMLElement;
        const isExpanded = this.getAttribute('aria-expanded') === 'true';
        
        // Close all other FAQ items
        faqQuestions.forEach((otherQuestion: Element) => {
          if (otherQuestion !== this) {
            otherQuestion.classList.remove('expanded');
            otherQuestion.setAttribute('aria-expanded', 'false');
            const otherAnswer = otherQuestion.nextElementSibling as HTMLElement;
            if (otherAnswer) {
              otherAnswer.classList.remove('expanded');
            }
          }
        });
        
        // Toggle current FAQ item
        if (isExpanded) {
          this.classList.remove('expanded');
          this.setAttribute('aria-expanded', 'false');
          answer.classList.remove('expanded');
        } else {
          this.classList.add('expanded');
          this.setAttribute('aria-expanded', 'true');
          answer.classList.add('expanded');
        }
      });
      
      // Keyboard navigation support
      question.addEventListener('keydown', function(e: Event) {
        const target = e.target as HTMLElement;
        if (e instanceof KeyboardEvent && (e.key === 'Enter' || e.key === ' ')) {
          e.preventDefault();
          target.click();
        }
      });
    });
  });
</script>
