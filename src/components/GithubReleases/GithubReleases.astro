---
interface Props {
  repoUrl: string;
}

const { repoUrl } = Astro.props;

// Extract owner and repo from the URL
const urlParts = repoUrl.split('/');
const owner = urlParts[urlParts.length - 2];
const repo = urlParts[urlParts.length - 1];

// Fetch releases from GitHub API
const response = await fetch(
  `https://api.github.com/repos/${owner}/${repo}/releases?per_page=10`
);
const releases = await response.json();

// Filter only stable releases (not pre-releases) and get the latest one
const stableReleases = releases.filter((release: any) => !release.prerelease);
const latestRelease = stableReleases[0]; // Get only the latest release
---

<div class="github-releases">
  <h3>Latest Stable Release</h3>
  {latestRelease && (
    <div class="release-container">
      <div class="release-header">
        <a href={latestRelease.html_url} target="_blank" rel="noopener noreferrer" class="version-link">
          <span class="version">{latestRelease.tag_name}</span>
          <span class="date">
            {new Date(latestRelease.published_at).toLocaleDateString()}
          </span>
        </a>
      </div>
      {latestRelease.assets && latestRelease.assets.length > 0 && (
        <div class="assets-container">
          <h4>Assets:</h4>
          <ul class="assets-list">
            {latestRelease.assets.map((asset: any) => (
              <li class="asset-item">
                <a 
                  href={asset.browser_download_url} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="asset-link"
                  title={`Size: ${(asset.size / 1024 / 1024).toFixed(2)} MB`}
                >
                  <span class="asset-name">{asset.name}</span>
                  <span class="asset-size">{(asset.size / 1024 / 1024).toFixed(2)} MB</span>
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )}
</div>

<style>
  .github-releases {
    padding: 1rem;
    background: var(--theme-card-bg);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  h3 {
    margin: 0 0 1rem 0;
    color: var(--theme-text);
  }

  h4 {
    margin: 0.5rem 0;
    font-size: 0.9em;
    color: var(--theme-text-light);
  }

  .release-container {
    border-bottom: 1px solid var(--theme-border);
  }

  .release-header {
    margin-bottom: 0.5rem;
  }

  .version-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-decoration: none;
    color: var(--theme-text);
  }

  .version {
    font-weight: bold;
    color: var(--theme-primary);
  }

  .date {
    font-size: 0.9em;
    color: var(--theme-text-light);
  }

  .assets-container {
    margin-top: 0.5rem;
    padding-left: 1rem;
  }

  .assets-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .asset-item {
    margin: 0;
    padding: 0;
  }

  .asset-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-decoration: none;
    color: var(--theme-text);
    padding: 0.5rem;
    border-radius: 4px;
    background: var(--theme-card-bg-secondary);
    transition: background-color 0.2s ease;
  }

  .asset-link:hover {
    background: var(--theme-card-bg-hover);
  }

  .asset-name {
    font-size: 0.9em;
    color: var(--theme-text);
  }

  .asset-size {
    font-size: 0.8em;
    color: var(--theme-text-light);
  }
</style> 