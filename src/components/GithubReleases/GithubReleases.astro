---
interface Props {
  repoUrl: string;
}

const { repoUrl } = Astro.props;

// Extract owner and repo from the URL
const urlParts = repoUrl.split('/');
const owner = urlParts[urlParts.length - 2];
const repo = urlParts[urlParts.length - 1];

// Fetch releases from GitHub API
const response = await fetch(
  `https://api.github.com/repos/${owner}/${repo}/releases?per_page=10`
);
const releases = await response.json();

// Filter only stable releases (not pre-releases) and get the latest one
const stableReleases = releases.filter((release: any) => !release.prerelease);
const latestRelease = stableReleases[0]; // Get only the latest release

interface Asset {
  name: string;
  browser_download_url: string;
  size: number;
}

function getAssetDescription(assetName: string): string {
  if (assetName.includes('windows') && assetName.includes('.exe')) return 'Windows installer';
  if (assetName.includes('linux') && assetName.includes('.deb')) return 'Debian package';
  if (assetName.includes('linux') && assetName.includes('.rpm')) return 'RPM package';
  if (assetName.includes('linux') && assetName.includes('tar.gz')) return 'Linux Binary';
  if (assetName.includes('macos') && (assetName.includes('aarch64') || assetName.includes('arm64'))) return 'Apple ARM';
  if (assetName.includes('macos') && (assetName.includes('x86_64') || assetName.includes('amd64'))) return 'Apple Intel';
  if (assetName.includes('freebsd')) return 'FreeBSD package';
  return '';
}
---

<div class="github-releases">
  <h3>Latest Stable Release</h3>
  {latestRelease && (
    <div class="release-container">
      <div class="release-header">
        <a href={latestRelease.html_url} target="_blank" rel="noopener noreferrer" class="version-link">
          <span class="version">{latestRelease.tag_name}</span>
          <span class="date">
            {new Date(latestRelease.published_at).toLocaleDateString()}
          </span>
        </a>
      </div>
      {latestRelease.assets && latestRelease.assets.length > 0 && (
        <div class="assets-container">
          <ul class="assets-list">
            {latestRelease.assets.map((asset: any) => (
              <li class="asset-item">
                <a 
                  href={asset.browser_download_url} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="download-button-wrapper"
                  title={`Size: ${(asset.size / 1024 / 1024).toFixed(2)} MB`}
                >
                  <div class="download-text-wrapper">
                    <span class="download-filename">Download now</span>
                    {getAssetDescription(asset.name) && <p>{getAssetDescription(asset.name)}</p>}
                  </div>
                  <div class="download-icon-wrapper">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-download"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
                  </div>
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )}
</div>

<style lang="scss">
  .github-releases {
    padding: 1rem;
    background: var(--theme-card-bg);
    border-radius: 8px;
    /* box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); */
  }

  h3 {
    margin: 0 0 1rem 0;
    color: var(--theme-text);
    font-size: 1.2rem;
    text-align: center;
  }

  h4 {
    margin: 0.5rem 0;
    font-size: 0.9em;
    color: var(--theme-text-light);
  }

  .release-container {
    padding-top: 1rem;
  }

  .release-header {
    margin-bottom: 0.5rem;
  }

  .version-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-decoration: none;
    color: var(--theme-text);
  }

  .version {
    font-weight: bold;
    color: var(--theme-primary);
  }

  .date {
    font-size: 0.9em;
    color: var(--theme-text-light);
  }

  .assets-container {
    margin-top: 0.5rem;
    padding-left: 0;
  }

  .assets-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .asset-item {
    margin: 0;
    padding: 0;
  }

  .download-button-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-decoration: none;
    color: var(--theme-text);
    padding: 1rem;
    border: 1px solid black;
    border-radius: 0px;
    background: transparent;
    transition: background-color 0.2s ease;

    &:hover {
      border: 1px solid var(--text-button-tertiary);
      background-color: var(--text-button-tertiary);

      .download-text-wrapper {
        .download-filename,
        p {
          color: white;
        }
      }

      .download-icon-wrapper {
        svg {
          stroke: var(--theme-primary);
        }
      }
    }
  }

  .download-text-wrapper {
    display: flex;
    flex-direction: column;

    .download-filename {
      font-weight: normal;
      font-size: 1.1em;
      color: var(--theme-text);
    }

    p {
      font-size: 0.8em;
      color: var(--theme-text-light);
      margin: 0;
    }
  }

  .download-icon-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    min-width: 40px;
    height: 40px;
    border-radius: 0%;
    border: none;
    color: var(--theme-primary);

    svg {
      width: 20px;
      height: 20px;
      stroke: var(--theme-text);
    }
  }

</style> 