---
import { DownloadIcon } from "../base/icons/DownloadIcon";
import { CheckIcon } from "../base/icons/CheckIcon";
import { PlatformType } from "../base/types/platform";

interface Props {
  repoUrl: string;
}

const { repoUrl } = Astro.props;

// Extract owner and repo from the URL
const urlParts = repoUrl.split('/');
const owner = urlParts[urlParts.length - 2];
const repo = urlParts[urlParts.length - 1];

// Fetch releases from GitHub API
const response = await fetch(
  `https://api.github.com/repos/${owner}/${repo}/releases?per_page=10`
);
const releases = await response.json();

// Filter only stable releases (not pre-releases) and get the latest one
const stableReleases = releases.filter((release: any) => !release.prerelease);
const latestRelease = stableReleases[0]; // Get only the latest release

interface Asset {
  name: string;
  browser_download_url: string;
  size: number;
}

function getAssetDescription(assetName: string): string {
  // Mapping based on provided examples
  if (/\.deb$/.test(assetName) && /x86_64-unknown-linux-gnu/.test(assetName)) {
    return "Debian / Ubuntu (x64)";
  }
  if (/\.rpm$/.test(assetName) && /x86_64-unknown-linux-gnu/.test(assetName)) {
    return "Red Hat / Fedora (x64)";
  }
  if (/\.pkg$/.test(assetName) && /x86_64-unknown-freebsd/.test(assetName)) {
    return "FreeBSD (x64, pkg)";
  }
  if (/\.tar\.gz$/.test(assetName) && /aarch64-unknown-linux-gnu/.test(assetName)) {
    return "Linux (ARM64, tar.gz)";
  }
  if (/\.tar\.gz$/.test(assetName) && /x86_64-unknown-freebsd/.test(assetName)) {
    return "FreeBSD (x64, tar.gz)";
  }
  if (/\.tar\.gz$/.test(assetName) && /x86_64-unknown-linux-gnu/.test(assetName)) {
    return "Linux (x64, tar.gz)";
  }
  return "";
}

function getPlatformType(assetName: string): PlatformType {
  if (assetName.includes('windows')) return PlatformType.WINDOWS;
  if (assetName.includes('linux') && assetName.includes('.deb')) return PlatformType.DEBIAN;
  if (assetName.includes('macos') && (assetName.includes('aarch64') || assetName.includes('arm64'))) return PlatformType.MACOSARM;
  if (assetName.includes('macos') && (assetName.includes('x86_64') || assetName.includes('amd64'))) return PlatformType.MACOSINTEL;
  return PlatformType.DEBIAN; // Default to Debian if unknown
}
---

<div class="github-releases">
  {latestRelease && (
    <div class="release-container">
      <div class="release-header">
        <div class="release-version-info">
          Latest stable release: {latestRelease.tag_name.replace(/^v/, "")} | View changelog â†’
          <a href={latestRelease.html_url} target="_blank" rel="noopener noreferrer">
            {new Date(latestRelease.published_at).toLocaleDateString()}
          </a>
        </div>
      </div>
      {latestRelease.assets && latestRelease.assets.length > 0 && (
        <div class="assets-container">
          <ul class="assets-list">
            {(() => {
              const assets = latestRelease.assets;
              const tarGzIndex = assets.findIndex((a: any) => a.name.includes('.tar.gz'));
              return assets.map((asset: any, idx: number) => [
                (idx === tarGzIndex && tarGzIndex !== 0) ? (
                  <li class="asset-separator">
                    <div class="download-separator">
                      <hr />
                      <p>compressed archives</p>
                      <hr />
                    </div>
                  </li>
                ) : null,
                <li class="asset-item">
                  <a 
                    href={asset.browser_download_url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="download-button-wrapper"
                    title={`Size: ${(asset.size / 1024 / 1024).toFixed(2)} MB`}
                  >
                    <div class="download-text-wrapper">
                      <span class="download-filename">Download now</span>
                      {getAssetDescription(asset.name) && <p>{getAssetDescription(asset.name)}</p>}
                    </div>
                    <DownloadIcon />
                  </a>
                </li>
              ]).flat();
            })()}
          </ul>
        </div>
      )}
    </div>
  )}
</div>

<style lang="scss">
  .github-releases {
    padding: 1rem;
    background: var(--theme-card-bg);
    border-radius: 8px;
  }

  h3 {
    margin: 0 0 1rem 0;
    color: var(--theme-text);
    font-size: 1.2rem;
    text-align: center;
  }


  .release-header {
    margin-bottom: 0.5rem;
  }

  .release-version-info {
    @include typography(pricebox-list);
    margin-bottom: 20px;
    line-height: 1.2;
    font-size: 16px;

    a {
      text-decoration: underline;
      color: inherit;
      white-space: nowrap;
      transition: color 0.2s;
    }
    a:hover {
      color: #0c8ce0;
    }
  }

  .assets-container {
    margin-top: 0.5rem;
    padding-left: 0;
  }

  .assets-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .asset-item {
    margin: 0;
    padding: 0;
  }

  .download-button-wrapper {
    display: flex;
    height: 78px;
    padding: 0px 20px;
    justify-content: space-between;
    align-items: center;
    align-self: stretch;
    border: 1px solid var(--text-body-primary);
    text-decoration: none;
    color: inherit;
    cursor: pointer;
    transition: all 0.2s ease;

    &:hover {
      background-color: var(--surface-frame-bg);
      border-color: #0c8ce0;

      .download-text-wrapper {
        .download-filename {
          color: #0c8ce0;
        }
        p {
          color: var(--theme-text);
        }
      }

      svg {
        path {
          stroke: #0c8ce0 !important;
        }
      }
    }
  }

  .download-text-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: flex-start;
    @include typography(paragraph);

    .download-filename {
      @include typography(paragraph);
      color: var(--theme-text);
    }

    p {
      @include typography(footer);
      margin: 0;
      color: var(--theme-text);
    }
  }

  .btn {
    all: unset;
    padding: 20px;
    svg {
      path,
      rect {
        fill: none;
        stroke: var(--text-body-primary);
        transition: stroke 0.2s ease;
      }
    }
  }

  .download-separator {
    display: flex;
    align-items: center;
    gap: 40px;
    align-self: stretch;
    text-align: center;
    @include typography(footer);
    padding-top: 1.5rem;
    padding-bottom: 1.5rem;

    hr {
      flex: 1;
      height: 1px;
      background-color: var(--border-separator);
      border: none;
      margin: 0;
    }

    p {
      width: 30%;
    }
  }

  @include break-down(sm) {
    P {
      font-size: 12px;
      font-weight: 300;
    }
    .download-separator p {
      width: 30%;
    }
  }
</style> 