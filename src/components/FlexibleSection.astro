---
import clsx from "clsx";
import ContentLimiter from "./ContentLimiter.astro";

interface Props {
  title: string | any;
  titleTag?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
  className?: string;
  id?: string;
  maxWidth?: number;
  variant?: 'white' | 'gray';
  theme?: 'light' | 'dark';
  bottomBorder?: boolean;
}

const {
  title,
  titleTag: TitleTag = 'h2',
  className,
  id,
  maxWidth = 1100,
  variant = 'white',
  theme = 'light',
  bottomBorder = true,
} = Astro.props;
---

<section 
  class={clsx(
    "flexible-section", 
    `variant-${variant}`, 
    `theme-${theme}`, 
    className
  )} 
  id={id}
  aria-labelledby={id ? `${id}-title` : undefined}
>
  <ContentLimiter maxWidth={maxWidth}>
    <div class="flexible-content">
      <div class={clsx("header", { "with-bottom-border": bottomBorder })}>
        <TitleTag class="section-title" id={id ? `${id}-title` : undefined} set:html={title}></TitleTag>
      </div>
      
      <slot />
      
      <div class="columns-container">
        <div class="column left-column">
          <slot name="left" />
        </div>
        
        <div class="column right-column">
          <slot name="right" />
        </div>
      </div>
    </div>
  </ContentLimiter>
</section>

<style lang="scss">
  @use "../styles/mixins" as *;

  .flexible-section {
    width: 100%;
    padding: 4rem 0;
    
    &.variant-white {
      background-color: var(--background-primary, #f9f9f9);
    }
    
    &.variant-gray {
      background-color: var(--background-secondary, #f5f5f5);
    }
    
    &.theme-light {
      color: var(--text-body-primary, #333);
      
      .section-title {
        color: var(--text-heading-primary, #111);
      }
    }
    
    &.theme-dark {
      color: var(--text-body-light, #f5f5f5);
      background-color: var(--background-dark, #222);
      
      .section-title {
        color: var(--text-heading-light, white);
      }
    }
    
    .flexible-content {
      display: flex;
      flex-direction: column;
      width: 100%;
      
        .header {
        width: 100%;
        box-sizing: border-box;
        padding-bottom: 2rem;

        &.with-bottom-border .section-title {
          border-bottom: 1px solid var(--text-body-primary);
          margin-bottom: 2rem;
          padding-bottom: 1rem;
        }
        
        .section-title {
          @include typography(section);
          font-weight: 400;
          margin-bottom: 1rem;
          
          @media (min-width: 768px) {
            margin-bottom: 1.5rem;
          }
        }
      }

      .columns-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        gap: 2rem;
        
        @media (min-width: 768px) {
          flex-direction: row;
          gap: 2rem;
        }
        
        .column {
          width: 100%;
          display: flex;
          flex-direction: column;
          
          @media (min-width: 768px) {
            width: calc(50% - 1rem); // explicit width calculation
          }
          
          &.left-column, &.right-column {
            display: flex;
            flex-direction: column;
            
            // Container elements with images
            > div, > p {
              width: 100%;
              
              img {
                width: 100%;
                height: auto !important; // Force auto height
                display: block;
              }
            }
            
            // Direct image children
            > img {
              width: 100%;
              height: auto !important; // Force auto height
              display: block;
            }
          }
        }
      }
    }
  }
</style>

